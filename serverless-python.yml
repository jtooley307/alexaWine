service: alexa-wine-skill-python

provider:
  name: aws
  runtime: python3.11
  region: ${env:AWS_REGION, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  memorySize: 256
  timeout: 30
  environment:
    WINE_API_BASE_URL: ${env:WINE_API_BASE_URL, 'https://api.sampleapis.com/wines'}
    ALEXA_SKILL_ID: ${env:ALEXA_SKILL_ID}
    LOG_LEVEL: ${env:LOG_LEVEL, 'info'}
    # Enable DynamoDB-backed search via environment flags
    USE_DYNAMODB: ${env:USE_DYNAMODB, 'false'}
    DYNAMODB_TABLE_PREFIX: ${env:DYNAMODB_TABLE_PREFIX, 'wine_skill_'}
  
  iamRoleStatements:
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: "arn:aws:logs:*:*:*"
    - Effect: Allow
      Action:
        - bedrock:InvokeModel
      Resource: "*"

functions:
  alexaSkill:
    handler: lambda_function.lambda_handler
    events:
      - alexaSkill:
          appId: ${env:ALEXA_SKILL_ID}
          enabled: true
    package:
      include:
        - lambda_function.py
        - config.py
        - utils.py
        - card_utils.py
        - apl_utils.py
        - wine_service.py
        - wine_api_service.py
        - wine_dynamodb_service.py
        - wineDatabase.json
        - apl/**
        - .env
      exclude:
        - node_modules/**
        - Tests/**
        - coverage/**
        - "*.js"
        - "*.json"
        - "!apl/**"
        - "!wineDatabase.json"
        - test_*.py
        - __pycache__/**
        - "*.pyc"

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: false
    slim: true
    strip: false
    pythonBin: python3
    fileName: requirements-lambda.txt
    noDeps:
      - boto3
      - botocore
